void test() {}

boolean getTrue() {
    putStringLn("getTrue");
    return true;
}

boolean getFalse() {
    putStringLn("getFalse");
    return false;
}

void printArr(int arr[], int size) {
    int i;
    putString("[");
    for (i = 0; i < size; i = i + 1) {
        putInt(arr[i]);
        if (i < size - 1)
            putString(", ");
    }
    putStringLn("]");
}

int main() {
    // Empty for statements
    {
        int i = 0;
        for (;;) {
            putIntLn(i);
            i = i + 1;
            if (i >= 10)
                break;
        }
    }

    putLn();

    {
        int i = 15;
        for (i = 0;;) {
            putIntLn(i);
            i = i + 1;
            if (i >= 10)
                break;
        }
    }

    putLn();

    {
        int i = 0;
        for (;i < 10;) {
            putIntLn(i);
            i = i + 1;
        }
    }

    putLn();

    {
        int i = 15;
        for (;i < 10; i = i + 1) {
            putIntLn(i);
        }
    }

    // Short-circuiting
    getTrue() && getFalse(); // getTrue getFalse
    putLn();
    getFalse() && getTrue(); // getFalse
    putLn();
    getTrue() || getFalse(); // getTrue
    putLn();
    getFalse() || getTrue(); // getFalse getTrue

    putLn();

    // Arrays as params
    {
        int arr[7] = {1, 2, 3, 4, 5};
        printArr(arr, 7); // [1, 2, 3, 4, 5, 0, 0]
    }

    putLn();

    // Float arrays
    {
        float a[5] = {1.0, 2.0, 3.0};
        putFloatLn(a[0]); // 1.0
        putFloatLn(a[1]); // 2.0
        putFloatLn(a[2]); // 3.0
        putFloatLn(a[3]); // 0.0
        putFloatLn(a[4]); // 0.0

        a[0] = a[4] = 5.0;
        putFloatLn(a[0]); // 5.0
        putFloatLn(a[4]); // 5.0
    }

    putLn();

    // Boolean arrays
    {
        boolean a[3] = {true, false};
        putBoolLn(a[0]); // true
        putBoolLn(a[1]); // false
        putBoolLn(a[2]); // false

        a[2] = a[0] || a[1];
        putBoolLn(a[2]); // true
    }

    putLn();

    // Escapes
    putStringLn("\"quotes\""); // "quotes"
    putStringLn("\'single\'"); // 'single'
    putStringLn("\nlines\n"); // \n lines \n
    putStringLn("\ttab"); // \t tab

    return 0;
}
