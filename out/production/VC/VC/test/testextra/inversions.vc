// Implementation of 3121 22T3 Assignment 1 Question 3

// For this algorithm we will assume that all arrays are of a constant size of 10, containing integers 0..9

// Prints an array of size n
void printArr(int a[10]) {
    int i;

    putString("[");
    for (i = 0; i < 10; i = i + 1) {
        putInt(a[i]);
        if (i < 10 - 1)
            putString(", ");
    }

    putStringLn("]");
}

// Naive algorithm to count inversions in an array
// An optimal algorithm would use merge sort, but that seems difficult to implement without heap allocation, pointers,
// or variable sized arrays.
int inversions(int a[]) {
    int inv = 0;
    int i;
    for (i = 0; i < 10; i = i + 1) {
        int j;
        for (j = i + 1; j < 10; j = j + 1)
            if (a[i] > a[j])
                inv = inv + 1;
    }

    return inv;
}

// Counts the inversions between two arrays of equal length containing integers 0..n-1
int inversionsBetween(int a[10], int b[]) {
    int indexes[10];
    int i;
    int c[10];

    for (i = 0; i < 10; i = i + 1) {
        indexes[a[i]] = i;
    }

    for (i = 0; i < 10; i = i + 1)
        c[i] = indexes[b[i]];

    putString("A: ");
    printArr(a);  // 2, 3, 4, 8, 6, 7, 9, 0, 5, 1
    putString("B: ");
    printArr(b);  // 1, 8, 3, 7, 0, 6, 4, 9, 5, 2
    putString("Indexes: ");
    printArr(indexes);  // 7, 9, 0, 1, 2, 8, 4, 5, 3, 6
    putString("C: ");
    printArr(c);  // 9, 3, 1, 5, 7, 4, 2, 6, 8, 0

    putString("Inversions: ");
    return inversions(c);
}

int main() {
    int a[] = { 2, 3, 4, 8, 6, 7, 9, 0, 5, 1 };
    int b[10] = { 1, 8, 3, 7, 0, 6, 4, 9, 5, 2 };
    putIntLn(inversionsBetween(a, b));  // 25
    return 0;
}
